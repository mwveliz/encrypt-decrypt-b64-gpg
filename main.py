import base64
import json


#FIRST ENCRYPT
mypayload = {
  "username": "111111111",
  "password": "XXXXXX",
  "only_cookies": False,
  "headless": True  ,
  "afc": False,
  "cmf": True,
  "cu": False,
  "sii": False,
  "wildcard": False,
  "url": ""
}

mystring = json.dumps(mypayload)
base64payload=base64.b64encode(mystring.encode("latin-1"))

import subprocess
public_key_b64 = "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUlOQkdoWFl4Y0JFQUNmbGhBWlFhUkxnQ1paZzZ3UWp4TWgzQWlLaUl4YURZc2RUcXNmT3laMWhCOHduclE3CnZkUzhQeVBLTThsanZJTFRSaXVPNkxvS2J1elJnQzA4RjZjbjJoc0RlVnM4YmlFS1M5MXkySmtreUpwR0NDcTgKWHp4Wk1TaWQ1NTZrMHJvVHRSSXI2aXJGSDJFWUVWUllySWR2SFE4K2wxeWJNQ285aXZpNTRwa1doZDBMMUxqRAovL3A0ckJjOTNNNUduYUtyeG1QTUJPMVJ6M0NVb2ZEaDdoL0lyTkhOZ2J4Y0VUZ1NHKzA5OWRlemRrdU4zaCtDCmZ1VHFLekI3QWJWeTJkdzZrNDZCNmIzd3RaOGlnbTRVQnFHczNpRXhjU3Y2cDlmRkZuVFV1dGtja2ZMa09MWXcKcWJxaW1EcVlhRG1MSEMwWHZwTHNBQVZ0ak55Z2FwakRhQmxhNmhhWUJTaUZOZUFUdHVuQTJWMmJZZkdNQkNmWApmZHN6SnJFdlJRNjRFVmtwOE5VVFNZUzN3WmFTek1NWGJmUkhEckVJNlltcEJ4WElKd1hQenFveFBmZFZKeWVnClNBb1lneE9ZNGVINnNBa3ZKTzRSMUlsRkZqbDNtQTJibmIyMVNZQnlIMGJDUCt2UzVXWFFRb3dXZVUzRE1YZ2sKbmhvWitxRHNDc1NhL2xsVkhOWmQxT3FBZDZuLzdxaDBXN0FPQ3dzSmxVRXNsakpFRHQxVUo5cStpWWlMd3VLVwp4ZkdJak0vRG1TZVBQdnNtVGNuTE5zVkFIMDYzdWI5TS9XUGNsV3dwOHA1ajErNUNFbmJjVVpnM1dRZXM1S0VIClphOGxHV1M3bUpTaU01MDlZMU5ETldPanhtYmZZa25vY1VyQ1RHTzREWEJscCtiMjVGYVBoZDB0M1FBUkFRQUIKdEJ4c1pXRnlaV1o0TWlBOGJYZDJaV3hwZWtCbmJXRnBiQzVqYjIwK2lRSlJCQk1CQ2dBN0ZpRUVRTC84R3hVbwpsUHlwNkV1MkVGKzNSM3Z5RndZRkFtaFhZeGNDR3dNRkN3a0lCd0lDSWdJR0ZRb0pDQXNDQkJZQ0F3RUNIZ2NDCkY0QUFDZ2tRRUYrM1IzdnlGd2FZdHcvL2ZsOXBHaU0xamN5SkFjN1hJU1l1aUozUlJFMGV6OEltQlpBNUgzd0cKZHpPdjc3ekIvWHJvcGlzN0Mrb2hML0VuSEg2R25zdkJUVERhQ2lreU9ZdWYwL0lJNlQ0ellPQjlnSmhNVWRhcApLUGhyblVVOHB3dEVNazZYYWZ4dVAyT1hOTC9La0t5dEdsME93dFphOE5jQXFoSHBjODBkMkxYcjc1STdIYmtQCmlTOUtOdUZPdjF2aC9jMzhGWm85NnJjVDJ0YW9tMVI0YUJFVDRQQ2VNV25mWFhMeTk5VmR4d21KMXRqcHlxUEQKL0VWSjJncjBKUGhTTEJSSW9aTGthekJhYSsvQnFEekk0V3AyRE5zeG5zc1BaNjRDKzgzTy9GS2hZR0NETFNmNgpQcG8zdzc5eHcwSHNRZTNMcTFxOWNEUituTW1hSnVvWVV6MFBUQkxFSkdkeW9QRFpZdWZUelU4TzhIVG5OTjZECm9pRW82RlBvMElXbEptQmlvT3BGZVEwSEZoaS9oMWdPeHJ0aWtsMTErQWlxUGNSMDBKS1dlZVVlWXNNRFJnODcKNGNLSWJqazRRaXRnOFh2Z3EySWxEZGxiMTUycFZCTDV6alVaOGR1OExjT3EvN2FaY1d5OWducHV0TXk2Uk0wMApzVVRuaUdENFNKQlVFTDJ3YVdoa1o4VkJ1Y2gvWlFaWkNWcjFQSUtOeGVDV2hlYVJvTTBmakxHODJoT1B4bFBXCjBwUGdmWTd2V1NyTjJTbUNFSkVGUzY2bUZMVWd5TDJ3VVVPS2t0TytjUHY2K1JVUllxOGo1RDBpeEowNEE3blcKMnBJRVFuODJDVEgweEFJZEV2Z0lqTkhPeGt4MHhIVmhHTXJtcDByNXQrcFVpK3VpSEtQWlR6YTlYR3RSaGZWSwozME81QWcwRWFGZGpGd0VRQUx4SU1rVnJaczVpKzIvZ055b0JBRjQvYnRlcHlIUU92VE00NldFbkZFcGsyZTROClBadEsyT3YxNi9sM2lkb1NIN3RNMFZjTFFxSlZ1ZUZzdnhSdHZZbFQzUGRMQ0N0bDh1RDFMakNwaDFsQ2tVRnEKMTlLZFBHNTJkd08vS29GR1NScFl1RGdJdmxGb0twQWQrT1ZCWlQxelBrYTR2dmlJOGdRZlRnd05leExxWjZ5ZgpZT3BTU2VybUNrZVhmeVN1OUxFWkJRZmhsUGlnYzRzOFJiWCtnQU0yeVl1U2Z3dzRsa0NMMVpaVE9mNjVnSkYvCmd1R0dnVmtuRmhzWnBXcitUUUxsMitGdVZhdnVhNDRWQUhUMFo2RWh2clZFQkxheTJPVHZKUUtwd1FMd2NGZVUKNGlnZTNwdjJ2NmhGcTg2TGtjUHFOaUtTOXNUR21Xbmk3SXorMTJhVy9BNVZ5L2pRdW5DSVQyY2lhbld5SWM5UApDeERlK082OXpLbWNZWUJKR0ZSb1VqVyszNGJZSjBwMXdReTJGZ3V0SGJaN213L3FXN2w1Z0ZFTkRvbjc0V3B2CkxncnowMlVKL283d2tyVXdyaDc1c2xWTE53ZUI1VGl2elAwbXdtSVlWQ0gwL0FOb1NKbUx5TmIycmtJUGV5YSsKckpLemIxdzQvV0VveXdhTGpDMkFYV1lGT09Bc2tqcWJ4Y0ViZDQvdGNrT3hlTWJxOHA4eE9pczhseXRjb09kagpoaXV2ZDZzZW01NXZZUHYxaDdvNGdGQUt5MytES1E0VjIyNHRUWWFxUVZBb1g1cVZtMkNWbFZHZmtzN2VLbDBKCjVabkRyekNaQ3Y1Qm9zUTQwa2NUYVVJYzlVa0ZYa3VDQTk0TnB2VnUrZ1JjanEvK0J3WDVkSkc0dmsvbkFCRUIKQUFHSkFqWUVHQUVLQUNBV0lRUkF2L3diRlNpVS9Lbm9TN1lRWDdkSGUvSVhCZ1VDYUZkakZ3SWJEQUFLQ1JBUQpYN2RIZS9JWEJzUytELzl5QnVwMG5vUUlPTktvc0xXbVpyd3IrVk11eUI5ZnZTeDRIckNUbSs3Qk9YMUVCcUp0Cmg5QWpDb0hVeDhWM2N4c2hGY2JoNnpoNHRsSERpZTV0TmVUc3VhcGkrWHJodTVaVkJESWlHNlZYalUzd2lLalUKK1RtcFdLeGVjN3Z4a3Fvb1k0cWEwU0h3ODAzTTVMS3RtNkRiZnVQU3dJWXNlMFBTcFVTSFRTSlhiZTV4ZXgwRQpxWXEwTXRCcURGVTJnSGlUTTFUcUhLb00wdER5TG9xVkQvWVRoME82d3IveU9GZDdkK2RuOVhzcS9IdFQ3dFFMCnFnRVhJMC9jKzlZNkdkMldvQml6Sm5Oekw0NUt6SHdaTGVjOTB3VGZ1OVVvUlZpSzA5bjlvMVJWcmE4ZzJrcDMKcGxCTEpNUkd4WU12NURXTHRDUWE0M3Z6Tk9YVVFGT0NWRndoWUI1dmc3eWwvd0cySVQ2TlMvRDhoZzVtUXZkZwo5aE9PVUZJeTE4VTVXOHcxajlsUVZqRUY1NSt5cEVFSnNTaEJnTFpJUEZ3MWJER0dHYXpnNzBMSitsdjJQUENGCjZHVTAwR3lhSzc1REwxVE9YVW9yWHpSRkNSVEkwdEw3RXpFNHJlSk9PdU9wOTBwUlM3VnZzc1ZBY3hDem9tM1AKSDYrM2VpNTBoR2xYUTBtOTZZYTBPNlhDbjkzcFVvNmw1a3dMNUo2L013YTZBdTdkNy9HNFlvZGdoZEVJYXVZTwp5RWEzclFVT2xsVjd0enloRFIwNlVZWDJVaEFGZHlVaUVXN1hIK0pHenFtQ0hIa1lIOG1RNldZUSs0Uldjdk5iCmEyS2wwL0gra2h2amJ0RUJTTlJ0aGlCUGJOVjc1d0tEbFZJaEN6dVdET3E4V00wdC9NMW00alNhWHc9PQo9eVJqVQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCg=="
public_key_string = base64.b64decode(public_key_b64.encode("utf-8"))


plaintext = base64payload.decode("latin-1")
import_command = ["gpg", "--batch", "--import"]
import_process = subprocess.run(import_command, input=public_key_string, capture_output=True, check=True)

## ENCRYPT
encrypt_command = [
    "gpg",
    "--encrypt",
    "--armor",
    "--recipient" ,"mwveliz@gmail.com"
]
encrypt_process = subprocess.run(encrypt_command, input=plaintext, capture_output=True, text=True, check=True)
ciphertext_armor = encrypt_process.stdout.strip()
ciphertext_base64 = base64.b64encode(ciphertext_armor.encode('utf-8')).decode('utf-8')
print(ciphertext_base64)


## NOW DECRYPT
private_key_b64 = "MY-base64-KEY"
private_key_bytes = base64.b64decode(private_key_b64.encode("utf-8"))

import_command = ["gpg", "--batch", "--import"]
import_process = subprocess.run(import_command, input=private_key_bytes, capture_output=True, check=True)

command = f'echo "{ciphertext_base64}" | base64 -d | gpg --decrypt --batch --yes --local-user learefx2'

process = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
request_payload = process.stdout.strip()
print(request_payload)
